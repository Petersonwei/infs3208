@page
@model Vote.Pages.IndexModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>@Model.OptionA vs @Model.OptionB!</title>
    <base href="/index.html">
    <meta name="viewport" content="width=device-width, initial-scale = 1.0">
    <meta name="keywords" content="docker-compose, docker, stack">
    <meta name="author" content="Docker DevRel team">
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
</head>
<body>
    <div id="content-container">
        <div id="content-container-center">
            <h3 id="event-title">@Model.OptionA vs @Model.OptionB!</h3> <!-- This will be replaced by JavaScript -->
            <form method="POST" id="choice" name='form'>
                <button id="a" type="submit" name="vote" class="a" value="a">@Model.OptionA</button> <!-- This will be replaced by JS -->
                <button id="b" type="submit" name="vote" class="b" value="b">@Model.OptionB</button> <!-- This will be replaced by JS -->
            </form>
            <div id="tip">
                (Tip: you can change your vote)
            </div>
            <div id="hostname">
                Processed by container ID @System.Environment.MachineName
            </div>
        </div>
    </div>

    <!-- Section to display current events -->
    <section id="current-events">
        <div class="container">
            <h3>Current Events</h3>
            <div id="event-list" class="event-list"></div> <!-- This will show the event list -->
        </div>
    </section>

    <script src="~/js/jquery-1.11.1-min.js" type="text/javascript"></script>

    <script>
        // JavaScript to dynamically fetch events and update the options
        const API_BASE_URL = 'https://data.brisbane.qld.gov.au/api/explore/v2.1/catalog/datasets/';
        const datasetId = 'brisbane-city-council-events';
        const eventTitle = document.getElementById('event-title');
        const buttonA = document.getElementById('a');
        const buttonB = document.getElementById('b');
        const eventList = document.getElementById('event-list'); // Container for showing current events

        async function fetchEvents() {
            const apiUrl = `${API_BASE_URL}${datasetId}/records?limit=10&order_by=start_datetime`; // Fetch 10 events
            try {
                const response = await fetch(apiUrl);
                const data = await response.json();

                if (data.results && data.results.length >= 2) {
                    const event1 = data.results[0].subject || '@Model.OptionA';
                    const event2 = data.results[1].subject || '@Model.OptionB';

                    // Dynamically update the title and button text with fetched events
                    eventTitle.textContent = `${event1} vs ${event2}!`;
                    buttonA.textContent = event1;
                    buttonB.textContent = event2;

                    // Display the list of current events below
                    displayCurrentEvents(data.results);
                } else {
                    eventTitle.textContent = 'No events found for voting!';
                }
            } catch (error) {
                console.error('Error fetching events:', error);
                eventTitle.textContent = 'Failed to load events.';
            }
        }

        // Call the function to fetch and display events
        fetchEvents();

        // Function to display current events
        function displayCurrentEvents(events) {
            eventList.innerHTML = ''; // Clear any existing content

            events.forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.classList.add('event-item');
                eventElement.innerHTML = `
                    <h4>${event.subject || 'Untitled Event'}</h4>
                    <p><strong>Location:</strong> ${event.location || 'TBA'}</p>
                    <p><strong>Date:</strong> ${event.formatteddatetime || 'N/A'}</p>
                `;
                eventList.appendChild(eventElement);
            });
        }

        // Handle vote rendering on page load
        var vote = "@Model.Vote";

        if (vote == "a") {
            $(".a").prop('disabled', true);
            $(".a").html('@Model.OptionA <i class="fa fa-check-circle"></i>');
            $(".b").css('opacity', '0.5');
        }
        if (vote == "b") {
            $(".b").prop('disabled', true);
            $(".b").html('@Model.OptionB <i class="fa fa-check-circle"></i>');
            $(".a").css('opacity', '0.5');
        }
    </script>
</body>
</html>
